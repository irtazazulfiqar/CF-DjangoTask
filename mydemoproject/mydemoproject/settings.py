"""
Django settings for mydemoproject project.

Generated by 'django-admin startproject' using Django 4.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
import pymysql
from dotenv import load_dotenv


load_dotenv()

pymysql.install_as_MySQLdb()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# A list of strings representing the host/domain names that
# this Django site can serve. Empty = localhost allowed only
ALLOWED_HOSTS = []

# which user model to use
AUTH_USER_MODEL = 'demoapp1.User'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'demoapp1'
]

# add security header for securing the request repose csrf etc
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# first one is prefered but if not avaialbel then next ones
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',  # Argon2
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',  # PBKDF2
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',  # PBKDF2 with SHA1
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',  # BCrypt + SHA256
    'django.contrib.auth.hashers.ScryptPasswordHasher',  # Scrypt
]

# Indicates the Python module where the URL configuration
# for this Django project is defined.
ROOT_URLCONF = 'mydemoproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            'templates',
            os.path.join(BASE_DIR, 'demoapp1', 'templates', 'demoapp1'),  # App-level templates
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mydemoproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME'),  # Replace with your actual database name
        'USER': os.getenv('DB_USER'),  # Replace with your new MySQL username
        'PASSWORD': os.getenv('DB_PASSWORD'),  # Replace with your new MySQL password
        'HOST': os.getenv('DB_HOST'),  # The host of your MySQL server
        'PORT': os.getenv('DB_PORT'),  # The port of your MySQL server
    }
}



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Login Url
# settings.py
LOGIN_URL = '/signin/'

EMAIL_DAYS = os.getenv('EMAIL_DAYS')

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

# USE_I18N: Whether to enable Django translation system.
# USE_TZ: Whether to use timezone-aware datetimes.
USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Email settings
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_PORT = '2525'

# SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')
# DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
# EMAIL_BACKEND = 'sendgrid_backend.SendgridBackend'
# SENDGRID_SANDBOX_MODE_IN_DEBUG = False


# site url for sending reset-password email
SITE_URL = 'http://127.0.0.1:8000'

PASSWORD_RESET_TIMEOUT = 120

